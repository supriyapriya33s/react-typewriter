{"version":3,"sources":["ContextProvider/TypeContext.js","Common/Components/ErrorComponent.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["initialState","type","timer","reducer","state","action","console","log","payload","TypeContext","createContext","TypeContextProvider","props","useReducer","dispatch","Provider","value","children","ErrorComponent","errorMessage","Typography","Link","href","TypeWriter","lazy","Results","Routes","fallback","exact","path","render","to","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mOAEMA,EAAe,CACnBC,KAAM,GACNC,MAAO,MAGHC,EAAU,SAACC,EAAOC,GAEtB,OADAC,QAAQC,IAAI,CAAEH,QAAOC,WACbA,EAAOJ,MACb,IAAK,eACH,OAAOI,EAAOG,QACV,CACEP,KAAMI,EAAOG,SAEf,CAAEP,KAAM,IACd,IAAK,QACH,OAAO,eACFD,GAEP,QACE,OAAOI,IAKAK,EAAcC,0BAGdC,EAAsB,SAACC,GAAW,IAAD,EAClBC,qBAAWV,EAASH,GADF,mBACrCI,EADqC,KAC9BU,EAD8B,KAG5C,OACE,kBAACL,EAAYM,SAAb,CAAsBC,MAAO,CAACZ,EAAOU,IAClCF,EAAMK,Y,+ICnBEC,EAZQ,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACxB,OACE,oCACE,kBAACC,EAAA,EAAD,0BACcD,GACZ,6BACA,kBAACE,EAAA,EAAD,CAAMC,KAAK,KAAX,uBCLFC,EAAaC,gBAAK,kBACtB,8DAGIC,EAAUD,gBAAK,kBACnB,uDA4BaE,EAjBA,kBACb,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUC,SAAU,mDAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM,kBAAC,IAAD,CAAUC,GAAG,mBACjD,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,cAAcC,OAAQ,kBAAM,kBAACP,EAAD,SAC9C,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,WAAWC,OAAQ,kBAAM,kBAACL,EAAD,SAE3C,kBAAC,IAAD,CACEI,KAAK,IACLC,OAAQ,kBAAM,kBAAC,EAAD,CAAgBX,aAAa,yB,QCpBtCa,EANH,kBACV,kBAACvB,EAAA,EAAD,KACE,kBAAC,EAAD,QCMgBwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASR,OACP,kBAAC,IAAMS,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.ad6960ef.chunk.js","sourcesContent":["import React, { createContext, useReducer } from 'react';\r\n\r\nconst initialState = {\r\n  type: {},\r\n  timer: null,\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  console.log({ state, action });\r\n  switch (action.type) {\r\n    case 'TYPE_TIMEOUT':\r\n      return action.payload\r\n        ? {\r\n            type: action.payload,\r\n          }\r\n        : { type: {} };\r\n    case 'RESET':\r\n      return {\r\n        ...initialState,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Create Context Object\r\nexport const TypeContext = createContext();\r\n\r\n// Create a provider for components to consume and subscribe to changes\r\nexport const TypeContextProvider = (props) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  return (\r\n    <TypeContext.Provider value={[state, dispatch]}>\r\n      {props.children}\r\n    </TypeContext.Provider>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Link, Typography } from '@material-ui/core';\r\n\r\nconst ErrorComponent = ({ errorMessage }) => {\r\n  return (\r\n    <>\r\n      <Typography>\r\n        Error - {`${errorMessage}`}\r\n        <br />\r\n        <Link href=\"#\">Go to Login Page</Link>\r\n      </Typography>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ErrorComponent;\r\n","import React, { Suspense, lazy } from 'react';\r\nimport { Route, Switch, Redirect, HashRouter } from 'react-router-dom';\r\nimport ErrorComponent from './Common/Components/ErrorComponent';\r\n\r\nconst TypeWriter = lazy(() =>\r\n  import(/* webpackChunkName: \"TypeWriter\" */ './TypeWriter')\r\n);\r\n\r\nconst Results = lazy(() =>\r\n  import(/* webpackChunkName: \"Results\" */ './Results')\r\n);\r\n\r\n/* Using HashRouter because GitHub Pages doesnâ€™t support routers \r\nthat use the HTML5 `pushState` history API under the hood \r\n(for example, React Router using `browserHistory`) so if you refresh the \r\nBrowser Page it gives a 404 Error page. \r\nThis is because when there is a fresh page load for a url like \r\n`http://user.github.io/todomvc/todos/42`, where `/todos/42` is a frontend route, \r\nthe GitHub Pages server returns 404 because it knows nothing of `/todos/42`.\r\n*/\r\nconst Routes = () => (\r\n  <HashRouter>\r\n    <Suspense fallback={<>Loading...</>}>\r\n      <Switch>\r\n        <Route exact path=\"/\" render={() => <Redirect to=\"/typewriter\" />} />\r\n        <Route exact path=\"/typewriter\" render={() => <TypeWriter />} />\r\n        <Route exact path=\"/results\" render={() => <Results />} />\r\n\r\n        <Route\r\n          path=\"*\"\r\n          render={() => <ErrorComponent errorMessage=\"Incorrect URL\" />}\r\n        />\r\n      </Switch>\r\n    </Suspense>\r\n  </HashRouter>\r\n);\r\n\r\nexport default Routes;\r\n","import React from 'react';\nimport Routes from './Routes';\nimport { TypeContextProvider } from './ContextProvider/TypeContext';\n\nconst App = () => (\n  <TypeContextProvider>\n    <Routes />\n  </TypeContextProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}