{"version":3,"sources":["TypeWriter/Components/TypeWriter.js","TypeWriter/index.js","TypeWriter/Constants/TypeWriter_Constants.js","Results/Components/Results.js"],"names":["useStyles","makeStyles","paper","position","left","top","transform","paper1","TypeWriter","classes","inputRef","useRef","useState","SAMPLE_TEXT","INPUT_TEXT","inputData","setInputData","START_BUTTON","RESET_BUTTON","disableData","setDisableData","useContext","TypeContext","timeLeft","setTimeLeft","typeTimeout","countdownTimerId","time","setTime","useEffect","prevData","paragraph","Box","className","variant","Grid","container","spacing","item","xs","sm","TextField","type","id","label","placeholder","name","fullWidth","value","multiline","rows","InputLabelProps","shrink","md","Button","color","onClick","current","focus","setTimeout","setInterval","clearInterval","CountdownTimer","disabled","Results","countdown","onChange","e","target","required","wpm","setWPM","errors","setErrors","console","log","split","arr","length","calculateWPM","count","trim","filter","val","includes","numOfErrors","calculateErrors","InputProps","endAdornment"],"mappings":"6PAaMA,EAAYC,YAAW,CAC3BC,MAAO,CACLC,SAAU,WACVC,KAAM,MACNC,IAAK,MACLC,UAAW,yBAQbC,OAAQ,CACNJ,SAAU,WACVC,KAAM,MACNC,IAAK,MACLC,UAAW,2BA6LAE,EAhLI,WAAO,IAAD,IACjBC,EAAUT,IACVU,EAAWC,mBAFM,EAGWC,oBAAQ,mBACvCC,IAAc,IADyB,cAEvCC,IAAa,IAF0B,IAHnB,mBAGhBC,EAHgB,KAGLC,EAHK,OAOeJ,oBAAQ,mBAC3CK,KAAe,GAD4B,cAE3CC,KAAe,GAF4B,cAG3CJ,KAAa,GAH8B,IAPvB,mBAOhBK,EAPgB,KAOHC,EAPG,OAYOC,qBAAWC,KAZlB,gCAaSV,mBAAS,KAblB,mBAahBW,EAbgB,KAaNC,EAbM,OAcCZ,mBAAS,CAC/Ba,YAAa,KACbC,iBAAkB,OAhBG,mBAchBC,EAdgB,KAcVC,EAdU,KAmBvBC,qBAAU,WAGR,OAFAb,GAAa,SAACc,GAAD,mBAAC,eAAmBA,GAApB,kBAA+BjB,IAAckB,oBAAU,SAE7D,eACN,IA8EH,OACE,oCACE,kBAACC,EAAA,EAAD,CAAKC,UAAWxB,EAAQP,MAAOgC,QAAQ,YACrC,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACvB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,IACrB,kBAACC,EAAA,EAAD,CACEC,KAAK,cACLC,GAAG,cACHC,MAAM,cACNC,YAAY,cACZC,KAAMjC,IACNkC,WAAS,EACTC,MAAOjC,EAAUF,KACjBqB,QAAQ,WACRe,WAAS,EACTC,KAAM,GACNC,gBAAiB,CACfC,QAAQ,MAId,kBAACjB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIc,GAAI,GACrB,kBAACC,EAAA,EAAD,CACEpB,QAAQ,YACRqB,MAAM,UACNC,QAvEQ,WAClBpC,GAAe,SAACU,GAAD,yBAAC,eACXA,GADU,uBAEZb,KAAe,GAFH,cAGZC,KAAe,GAHH,cAIZJ,KAAa,GAJD,OAMfJ,EAAS+C,QAAQC,QACjB,IAAMjC,EAAckC,YAAW,WAC7BvC,GAAe,SAACU,GAAD,mBAAC,eACXA,GADU,kBAEZhB,KAAa,SAEf,KACHc,GAAQ,SAACE,GAAD,mBAAC,eAAmBA,GAApB,IAA8BL,mBAhCjB,WACrB,IAAMC,EAAmBkC,aAAY,WACnCpC,GAAY,SAACM,GACX,OAAiB,IAAbA,GACF+B,cAAcnC,GACdmC,cAAclC,EAAKD,kBACnBN,GAAe,SAACU,GAAD,mBAAC,eACXA,GADU,kBAEZhB,KAAa,OAETgB,EAAW,GAEbA,EAAW,OAEnB,KACHF,GAAQ,SAACE,GAAD,mBAAC,eAAmBA,GAApB,IAA8BJ,wBAkBtCoC,IAyDUC,SAAU5C,EAAYF,MAJxB,UASF,kBAACkB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIc,GAAI,GACrB,kBAACC,EAAA,EAAD,CACEpB,QAAQ,YACRqB,MAAM,UACNC,QA/DQ,WAClBxC,GAAa,SAACc,GAAD,yBAAC,eACTA,GADQ,uBAEVjB,IAAckB,oBAAU,KAFd,cAGVjB,IAAa,IAHH,OAKbM,GAAe,SAACU,GAAD,yBAAC,eACXA,GADU,uBAEZb,KAAe,GAFH,cAGZC,KAAe,GAHH,cAIZJ,KAAa,GAJD,OAMf+C,cAAclC,EAAKD,kBACnBF,EAAY,KAmDFuC,SAAU5C,EAAYD,MAJxB,UASF,kBAACiB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIc,GAAI,GACrB,kBAACW,EAAA,EAAD,CACEC,UAAW1C,EACXR,UAAWA,EACXC,aAAcA,KAGlB,kBAACmB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,IACrB,kBAACC,EAAA,EAAD,CACEC,KAAK,aACLC,GAAG,aACHC,MAAM,aACNC,YAAY,aACZC,KAAMhC,IACNiC,WAAS,EACTC,MAAOjC,EAAUD,KACjBoB,QAAQ,WACRe,WAAS,EACTC,KAAM,GACNgB,SAnEc,SAACC,GAAO,IAAD,EACPA,EAAEC,OAAlBtB,EADuB,EACvBA,KAAME,EADiB,EACjBA,MACT7B,EAAYL,MACfE,GAAa,SAACc,GAAD,mBAAC,eAAmBA,GAApB,kBAA+BgB,EAAOE,QAiE3CtC,SAAUA,EAEV2D,UAAQ,EACRlB,gBAAiB,CACfC,QAAQ,UC/MT5C,a,gCCFf,wIAAO,IAAMK,EAAc,cACdC,EAAa,aACbG,EAAe,eACfC,EAAe,gB,uGCmGb8C,IA9FC,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,UAAWlD,EAAgB,EAAhBA,UAAgB,EACtBH,mBAAS,GADa,mBACrC0D,EADqC,KAChCC,EADgC,OAEhB3D,mBAAS,GAFO,mBAErC4D,EAFqC,KAE7BC,EAF6B,KA+B5C,OA3BA5C,qBAAU,WACR6C,QAAQC,IAAI5D,EAAUD,KAAY8D,MAAM,OACnB,WACnB,IAAMC,EAAM9D,EAAUD,KAAY8D,MAAM,KACpCC,EAAIC,OAAS,GACfP,EAAOM,EAAIC,OAAS,IAAM,GAAKb,GAAa,KAGhDc,CAAahE,EAAUD,OACC,WAQtB,IAAMkE,EAAQjE,EAAUD,KAAYmE,KAAK,KACtCL,MAAM,KACNM,QAAO,SAACC,GAAD,OAAUpE,EAAUF,KAAa+D,MAAM,KAAKQ,SAASD,MACzDE,EAAcL,EAAMF,OAC1BJ,QAAQC,IAAI,WAAYK,EAAOK,GAC/BZ,EAAUY,GAEZC,CAAgBvE,EAAUD,QACzB,CAACmD,EAAWlD,IAGb,oCACE,kBAAC,IAAD,CAAMqB,WAAS,EAACC,QAAS,GACvB,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAIc,GAAI,GACrB,kBAAC,IAAD,CACEX,KAAK,OACLC,GAAG,YACHC,MAAM,YACNC,YAAY,YACZC,KAAK,YACLC,WAAS,EACTC,MAAOiB,EACP/B,QAAQ,WACRiB,gBAAiB,CACfC,QAAQ,GAEVmC,WAAY,CACVC,aACE,kBAAC,IAAD,CAAgBrF,SAAS,SAAzB,WAKR,kBAAC,IAAD,CAAMmC,MAAI,EAACC,GAAI,GAAIc,GAAI,GACrB,kBAAC,IAAD,CACEX,KAAK,OACLC,GAAG,eACHC,MAAM,eACNC,YAAY,eACZC,KAAK,eACLC,WAAS,EACTC,MAAOjC,EAAUD,KAAcwD,EAAM,EACrCpC,QAAQ,WACRiB,gBAAiB,CACfC,QAAQ,GAEVmC,WAAY,CACVC,aACE,kBAAC,IAAD,CAAgBrF,SAAS,SAAzB,YAKR,kBAAC,IAAD,CAAMmC,MAAI,EAACC,GAAI,GAAIc,GAAI,GACrB,kBAAC,IAAD,CACEX,KAAK,OACLC,GAAG,gBACHC,MAAM,gBACNC,YAAY,gBACZC,KAAK,gBACLC,WAAS,EACTC,MAAOjC,EAAUD,KAAc0D,EAAS,EACxCtC,QAAQ,WACRiB,gBAAiB,CACfC,QAAQ","file":"static/js/TypeWriter.106a653f.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect, useContext } from 'react';\r\nimport { paragraph } from 'txtgen';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Box, Grid, TextField, Button } from '@material-ui/core';\r\nimport {\r\n  SAMPLE_TEXT,\r\n  INPUT_TEXT,\r\n  START_BUTTON,\r\n  RESET_BUTTON,\r\n} from '../Constants/TypeWriter_Constants';\r\nimport { TypeContext } from '../../ContextProvider/TypeContext';\r\nimport Results from '../../Results/Components/Results';\r\n\r\nconst useStyles = makeStyles({\r\n  paper: {\r\n    position: 'absolute',\r\n    left: '50%',\r\n    top: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n  },\r\n  // paper1: {\r\n  //   position: 'absolute',\r\n  //   left: '83%',\r\n  //   top: '17%',\r\n  //   transform: 'translate(-83%, -17%)',\r\n  // },\r\n  paper1: {\r\n    position: 'absolute',\r\n    left: '85%',\r\n    top: '25%',\r\n    transform: 'translate(-85%, -25%)',\r\n  },\r\n});\r\n\r\n// const addStyle = makeStyles({\r\n//   paper: {\r\n//     position: 'fixed',\r\n//     left: '70%',\r\n//     top: '30%',\r\n//     transform: 'translate(-70%, -30%)',\r\n//   },\r\n// })\r\n\r\nconst TypeWriter = () => {\r\n  const classes = useStyles();\r\n  const inputRef = useRef();\r\n  const [inputData, setInputData] = useState({\r\n    [SAMPLE_TEXT]: '',\r\n    [INPUT_TEXT]: '',\r\n  });\r\n  const [disableData, setDisableData] = useState({\r\n    [START_BUTTON]: false,\r\n    [RESET_BUTTON]: true,\r\n    [INPUT_TEXT]: true,\r\n  });\r\n  const [typeState, dispatch] = useContext(TypeContext);\r\n  const [timeLeft, setTimeLeft] = useState(60);\r\n  const [time, setTime] = useState({\r\n    typeTimeout: null,\r\n    countdownTimerId: null,\r\n  });\r\n\r\n  useEffect(() => {\r\n    setInputData((prevData) => ({ ...prevData, [SAMPLE_TEXT]: paragraph(10) }));\r\n\r\n    return () => {};\r\n  }, []);\r\n\r\n  // const Timer = () => {\r\n  //   const intervalId = setInterval(() => {\r\n  //     setTimeLeft((prevData) => {\r\n  //       if (prevData === 0) {\r\n  //         clearInterval(intervalId);\r\n  //         return '00';\r\n  //       }\r\n  //       return prevData - 1;\r\n  //     });\r\n  //   }, 1000);\r\n  // };\r\n\r\n  const CountdownTimer = () => {\r\n    const countdownTimerId = setInterval(() => {\r\n      setTimeLeft((prevData) => {\r\n        if (prevData === 1) {\r\n          clearInterval(countdownTimerId);\r\n          clearInterval(time.countdownTimerId);\r\n          setDisableData((prevData) => ({\r\n            ...prevData,\r\n            [INPUT_TEXT]: true,\r\n          }));\r\n          return prevData - 1;\r\n        }\r\n        return prevData - 1;\r\n      });\r\n    }, 1000);\r\n    setTime((prevData) => ({ ...prevData, countdownTimerId }));\r\n  };\r\n\r\n  const handleStart = () => {\r\n    setDisableData((prevData) => ({\r\n      ...prevData,\r\n      [START_BUTTON]: true,\r\n      [RESET_BUTTON]: false,\r\n      [INPUT_TEXT]: false,\r\n    }));\r\n    inputRef.current.focus();\r\n    const typeTimeout = setTimeout(function () {\r\n      setDisableData((prevData) => ({\r\n        ...prevData,\r\n        [INPUT_TEXT]: true,\r\n      }));\r\n    }, 60000);\r\n    setTime((prevData) => ({ ...prevData, typeTimeout }));\r\n    CountdownTimer();\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setInputData((prevData) => ({\r\n      ...prevData,\r\n      [SAMPLE_TEXT]: paragraph(10),\r\n      [INPUT_TEXT]: '',\r\n    }));\r\n    setDisableData((prevData) => ({\r\n      ...prevData,\r\n      [START_BUTTON]: false,\r\n      [RESET_BUTTON]: true,\r\n      [INPUT_TEXT]: true,\r\n    }));\r\n    clearInterval(time.countdownTimerId);\r\n    setTimeLeft(60);\r\n  };\r\n\r\n  // const handleInput = () => (e) => {\r\n  //   const { name, value } = e.target;\r\n  //   if (!disableData[INPUT_TEXT]) setInputData({ ...inputData, [name]: value });\r\n  // };\r\n\r\n  const handleInput = () => (e) => {\r\n    const { name, value } = e.target;\r\n    if (!disableData[INPUT_TEXT]) {\r\n      setInputData((prevData) => ({ ...prevData, [name]: value }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box className={classes.paper} variant=\"outlined\">\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12} sm={12}>\r\n            <TextField\r\n              type=\"sample-text\"\r\n              id=\"sample-text\"\r\n              label=\"Sample Text\"\r\n              placeholder=\"Sample Text\"\r\n              name={SAMPLE_TEXT}\r\n              fullWidth\r\n              value={inputData[SAMPLE_TEXT]}\r\n              variant=\"outlined\"\r\n              multiline\r\n              rows={10}\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} md={2}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={handleStart}\r\n              disabled={disableData[START_BUTTON]}\r\n            >\r\n              Start\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={12} md={2}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={handleReset}\r\n              disabled={disableData[RESET_BUTTON]}\r\n            >\r\n              Reset\r\n            </Button>\r\n          </Grid>\r\n          <Grid item xs={12} md={8}>\r\n            <Results\r\n              countdown={timeLeft}\r\n              inputData={inputData}\r\n              setInputData={setInputData}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={12}>\r\n            <TextField\r\n              type=\"input-text\"\r\n              id=\"input-text\"\r\n              label=\"Input Text\"\r\n              placeholder=\"Input Text\"\r\n              name={INPUT_TEXT}\r\n              fullWidth\r\n              value={inputData[INPUT_TEXT]}\r\n              variant=\"outlined\"\r\n              multiline\r\n              rows={10}\r\n              onChange={handleInput()}\r\n              inputRef={inputRef}\r\n              // disabled={disableData[INPUT_TEXT]}\r\n              required\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TypeWriter;\r\n","import TypeWriter from './Components/TypeWriter';\r\n\r\nexport default TypeWriter;\r\n","export const SAMPLE_TEXT = 'sample-text';\r\nexport const INPUT_TEXT = 'input-text';\r\nexport const START_BUTTON = 'start-button';\r\nexport const RESET_BUTTON = 'reset-button';\r\n","import React, { useState, useEffect } from 'react';\r\nimport isEqual from 'lodash/isEqual';\r\nimport { Grid, TextField, InputAdornment } from '@material-ui/core';\r\nimport {\r\n  SAMPLE_TEXT,\r\n  INPUT_TEXT,\r\n} from '../../TypeWriter/Constants/TypeWriter_Constants';\r\n\r\nconst Results = ({ countdown, inputData }) => {\r\n  const [wpm, setWPM] = useState(0);\r\n  const [errors, setErrors] = useState(0);\r\n\r\n  useEffect(() => {\r\n    console.log(inputData[INPUT_TEXT].split(' '));\r\n    const calculateWPM = () => {\r\n      const arr = inputData[INPUT_TEXT].split(' ');\r\n      if (arr.length > 1) {\r\n        setWPM(arr.length / 5 / ((60 - countdown) / 60));\r\n      }\r\n    };\r\n    calculateWPM(inputData[INPUT_TEXT]);\r\n    const calculateErrors = () => {\r\n      // const count = isEqual(\r\n      //   inputData[INPUT_TEXT].split(' '),\r\n      //   inputData[SAMPLE_TEXT].split(' ')\r\n      // );\r\n      // const count =\r\n      //   JSON.stringify(inputData[INPUT_TEXT].split(' ')) ===\r\n      //   JSON.stringify(inputData[SAMPLE_TEXT].split(' '));\r\n      const count = inputData[INPUT_TEXT].trim(' ')\r\n        .split(' ')\r\n        .filter((val) => !inputData[SAMPLE_TEXT].split(' ').includes(val));\r\n      const numOfErrors = count.length;\r\n      console.log('>>>>>>>>', count, numOfErrors);\r\n      setErrors(numOfErrors);\r\n    };\r\n    calculateErrors(inputData[INPUT_TEXT]);\r\n  }, [countdown, inputData]);\r\n\r\n  return (\r\n    <>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12} md={4}>\r\n          <TextField\r\n            type=\"text\"\r\n            id=\"time-left\"\r\n            label=\"Time Left\"\r\n            placeholder=\"Time Left\"\r\n            name=\"time-left\"\r\n            fullWidth\r\n            value={countdown}\r\n            variant=\"outlined\"\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n            InputProps={{\r\n              endAdornment: (\r\n                <InputAdornment position=\"start\">sec</InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={4}>\r\n          <TextField\r\n            type=\"text\"\r\n            id=\"typing-speed\"\r\n            label=\"Typing Speed\"\r\n            placeholder=\"Typing Speed\"\r\n            name=\"typing-speed\"\r\n            fullWidth\r\n            value={inputData[INPUT_TEXT] ? wpm : 0}\r\n            variant=\"outlined\"\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n            InputProps={{\r\n              endAdornment: (\r\n                <InputAdornment position=\"start\">/min</InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={4}>\r\n          <TextField\r\n            type=\"text\"\r\n            id=\"typing-errors\"\r\n            label=\"Typing Errors\"\r\n            placeholder=\"Typing Errors\"\r\n            name=\"typing-errors\"\r\n            fullWidth\r\n            value={inputData[INPUT_TEXT] ? errors : 0}\r\n            variant=\"outlined\"\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Results;\r\n"],"sourceRoot":""}