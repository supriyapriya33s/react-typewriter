{"version":3,"sources":["Results/index.js","TypeWriter/Constants/TypeWriter_Constants.js","Results/Components/Results.js"],"names":["Results","SAMPLE_TEXT","INPUT_TEXT","START_BUTTON","RESET_BUTTON","countdown","inputData","useState","wpm","setWPM","errors","setErrors","useEffect","console","log","split","arr","length","calculateWPM","count","trim","filter","val","includes","numOfErrors","calculateErrors","container","spacing","item","xs","md","type","id","label","placeholder","name","fullWidth","value","variant","InputLabelProps","shrink","InputProps","endAdornment","position"],"mappings":"4HAAA,mBAEeA,YAAf,G,gCCFA,wIAAO,IAAMC,EAAc,cACdC,EAAa,aACbC,EAAe,eACfC,EAAe,gB,uGCmGbJ,IA9FC,SAAC,GAA8B,IAA5BK,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UAAgB,EACtBC,mBAAS,GADa,mBACrCC,EADqC,KAChCC,EADgC,OAEhBF,mBAAS,GAFO,mBAErCG,EAFqC,KAE7BC,EAF6B,KA+B5C,OA3BAC,qBAAU,WACRC,QAAQC,IAAIR,EAAUJ,KAAYa,MAAM,OACnB,WACnB,IAAMC,EAAMV,EAAUJ,KAAYa,MAAM,KACpCC,EAAIC,OAAS,GACfR,EAAOO,EAAIC,OAAS,IAAM,GAAKZ,GAAa,KAGhDa,CAAaZ,EAAUJ,OACC,WAQtB,IAAMiB,EAAQb,EAAUJ,KAAYkB,KAAK,KACtCL,MAAM,KACNM,QAAO,SAACC,GAAD,OAAUhB,EAAUL,KAAac,MAAM,KAAKQ,SAASD,MACzDE,EAAcL,EAAMF,OAC1BJ,QAAQC,IAAI,WAAYK,EAAOK,GAC/Bb,EAAUa,GAEZC,CAAgBnB,EAAUJ,QACzB,CAACG,EAAWC,IAGb,oCACE,kBAAC,IAAD,CAAMoB,WAAS,EAACC,QAAS,GACvB,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAAC,IAAD,CACEC,KAAK,OACLC,GAAG,YACHC,MAAM,YACNC,YAAY,YACZC,KAAK,YACLC,WAAS,EACTC,MAAOhC,EACPiC,QAAQ,WACRC,gBAAiB,CACfC,QAAQ,GAEVC,WAAY,CACVC,aACE,kBAAC,IAAD,CAAgBC,SAAS,SAAzB,WAKR,kBAAC,IAAD,CAAMf,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAAC,IAAD,CACEC,KAAK,OACLC,GAAG,eACHC,MAAM,eACNC,YAAY,eACZC,KAAK,eACLC,WAAS,EACTC,MAAO/B,EAAUJ,KAAcM,EAAM,EACrC8B,QAAQ,WACRC,gBAAiB,CACfC,QAAQ,GAEVC,WAAY,CACVC,aACE,kBAAC,IAAD,CAAgBC,SAAS,SAAzB,YAKR,kBAAC,IAAD,CAAMf,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAAC,IAAD,CACEC,KAAK,OACLC,GAAG,gBACHC,MAAM,gBACNC,YAAY,gBACZC,KAAK,gBACLC,WAAS,EACTC,MAAO/B,EAAUJ,KAAcQ,EAAS,EACxC4B,QAAQ,WACRC,gBAAiB,CACfC,QAAQ","file":"static/js/Results.a8d8c88a.chunk.js","sourcesContent":["import Results from './Components/Results';\r\n\r\nexport default Results;\r\n","export const SAMPLE_TEXT = 'sample-text';\r\nexport const INPUT_TEXT = 'input-text';\r\nexport const START_BUTTON = 'start-button';\r\nexport const RESET_BUTTON = 'reset-button';\r\n","import React, { useState, useEffect } from 'react';\r\nimport isEqual from 'lodash/isEqual';\r\nimport { Grid, TextField, InputAdornment } from '@material-ui/core';\r\nimport {\r\n  SAMPLE_TEXT,\r\n  INPUT_TEXT,\r\n} from '../../TypeWriter/Constants/TypeWriter_Constants';\r\n\r\nconst Results = ({ countdown, inputData }) => {\r\n  const [wpm, setWPM] = useState(0);\r\n  const [errors, setErrors] = useState(0);\r\n\r\n  useEffect(() => {\r\n    console.log(inputData[INPUT_TEXT].split(' '));\r\n    const calculateWPM = () => {\r\n      const arr = inputData[INPUT_TEXT].split(' ');\r\n      if (arr.length > 1) {\r\n        setWPM(arr.length / 5 / ((60 - countdown) / 60));\r\n      }\r\n    };\r\n    calculateWPM(inputData[INPUT_TEXT]);\r\n    const calculateErrors = () => {\r\n      // const count = isEqual(\r\n      //   inputData[INPUT_TEXT].split(' '),\r\n      //   inputData[SAMPLE_TEXT].split(' ')\r\n      // );\r\n      // const count =\r\n      //   JSON.stringify(inputData[INPUT_TEXT].split(' ')) ===\r\n      //   JSON.stringify(inputData[SAMPLE_TEXT].split(' '));\r\n      const count = inputData[INPUT_TEXT].trim(' ')\r\n        .split(' ')\r\n        .filter((val) => !inputData[SAMPLE_TEXT].split(' ').includes(val));\r\n      const numOfErrors = count.length;\r\n      console.log('>>>>>>>>', count, numOfErrors);\r\n      setErrors(numOfErrors);\r\n    };\r\n    calculateErrors(inputData[INPUT_TEXT]);\r\n  }, [countdown, inputData]);\r\n\r\n  return (\r\n    <>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12} md={4}>\r\n          <TextField\r\n            type=\"text\"\r\n            id=\"time-left\"\r\n            label=\"Time Left\"\r\n            placeholder=\"Time Left\"\r\n            name=\"time-left\"\r\n            fullWidth\r\n            value={countdown}\r\n            variant=\"outlined\"\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n            InputProps={{\r\n              endAdornment: (\r\n                <InputAdornment position=\"start\">sec</InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={4}>\r\n          <TextField\r\n            type=\"text\"\r\n            id=\"typing-speed\"\r\n            label=\"Typing Speed\"\r\n            placeholder=\"Typing Speed\"\r\n            name=\"typing-speed\"\r\n            fullWidth\r\n            value={inputData[INPUT_TEXT] ? wpm : 0}\r\n            variant=\"outlined\"\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n            InputProps={{\r\n              endAdornment: (\r\n                <InputAdornment position=\"start\">/min</InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={4}>\r\n          <TextField\r\n            type=\"text\"\r\n            id=\"typing-errors\"\r\n            label=\"Typing Errors\"\r\n            placeholder=\"Typing Errors\"\r\n            name=\"typing-errors\"\r\n            fullWidth\r\n            value={inputData[INPUT_TEXT] ? errors : 0}\r\n            variant=\"outlined\"\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Results;\r\n"],"sourceRoot":""}